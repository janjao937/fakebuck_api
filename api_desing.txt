=REGISTER=
POST /auth/register
BODY firstName,lastName,email or mobile,password,confirmPassword
RESPONSE
201 => {String:accessToken,user} send accessToken for auto login (add to localStorage)
400 => {String:message,emailOrMobileExits:true}
500 => {String:message}

=LOGIN=
RESPONSE
POST /auth/login
BODY email or mobile,password
201 => {String:accessToken} send accessToken for auto login (add to localStorage)
400 => {String:message}
500 => {String:message}


=GET AUTHENTICATED USER=
GET /auth/me
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 {user:{id:Number,firstName:string}}
401 {message:string}
500 {message:string}

UPDATE PROFILE/COVER IMG
PATCH   /user
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
BODY profileImage?,coverImage?
RESPONSE
200 {profileImage:string?,coverImage:string?}
400 {message:string}
401 {message:string}
500 {message:string}

GET USER PROFILE
GET /user/:userId
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 {user:{id,firstName,lastName,profileImage,coverImage}}
401 {message:string(Invalid Token)} 
501 {message:string(Server error)}


# FRIEND

REQUEST FRIEND
POST /friend/:receiverId
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 {message:string}
400 {message:string}
401 {message:string}
500 {message:string}

DELETE FRIEND
POST /friend/:targetUserId
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 {message:string}
400 {message:string}
401 {message:string}
500 {message:string}

ACCEPT FRIEND
PATCH /friend/:requesterId
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
RESPONSE
200 {message:string}
400 {message:string}
401 {message:string}
500 {message:string}

CREATE POST
POST /post
HEADER AUTHORIZATION Bearer ACCESS_TOKEN
BODY message?, image?
RESPONSE
201 { message: String }
400 { message: String }
401 { message: String }
500 { message: String }

GET ALL POST INCLUDE POST FRIENDS
GET /post/friend
RESPONSE
200 {posts:[{id,message,img,string,user:{id,firstName,lastName,img,...}}]}
400 {message:string}
401 {message:string}
500 {message:string}